import com.android.build.api.dsl.ManagedVirtualDevice

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

def incrementVersionCodeOnReleaseBuild() {
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(':app:assembleRelease')) {
            incrementVersionCode()
        }
    }
}

def incrementVersionCode() {
    Properties properties = new Properties()
    def _versionCode
    def _versionName
    if (project.rootProject.file('local.properties').canRead()) {
        properties.load(new FileInputStream(project.rootProject.file('local.properties')))
        _versionCode = properties['versionCode'].toInteger()
        _versionName = properties['versionName']

        properties['versionCode'] = (_versionCode + 1).toString()
        properties['versionName'] = _versionName
        properties.store(project.rootProject.file('local.properties').newWriter(), null)

    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

// create a gradle task to run incrementVersionCode
task incrementVersionCode {
    doLast {
        incrementVersionCode()
    }
}

def versionCodeFromLocalProperties() {
    Properties properties = new Properties()
    def _versionCode
    if (project.rootProject.file('local.properties').canRead()) {
        properties.load(new FileInputStream(project.rootProject.file('local.properties')))
        _versionCode = properties['versionCode'].toInteger()
        return _versionCode
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

def versionNameFromLocalProperties() {
    Properties properties = new Properties()
    def _versionName
    if (project.rootProject.file('local.properties').canRead()) {
        properties.load(new FileInputStream(project.rootProject.file('local.properties')))
        _versionName = properties['versionName']
        return _versionName
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

android {
    namespace 'com.example.fastdroid'
    compileSdk 33


//    incrementVersionCodeOnReleaseBuild()

    defaultConfig {
        applicationId "com.example.fastdroid"
        minSdk 24
        targetSdk 33
        versionCode versionCodeFromLocalProperties()
        versionName versionNameFromLocalProperties()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }


    testOptions {
        managedDevices {
            devices {
                pixel2api30 (ManagedVirtualDevice) {
                    // Use device profiles you typically see in Android Studio.
                    device = "Pixel 2"
                    // Use only API levels 27 and higher.
                    apiLevel = 30
                    // To include Google services, use "google".
                    systemImageSource = "aosp"
                }
            }
        }
    }

    lintOptions {
        // Turns off checks for the issue IDs you specify.
        disable 'TypographyFractions','TypographyQuotes'
        // Turns on checks for the issue IDs you specify. These checks are in
        // addition to the default lint checks.
        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
        // To enable checks for only a subset of issue IDs and ignore all others,
        // list the issue IDs with the 'check' property instead. This property overrides
        // any issue IDs you enable or disable using the properties above.
        checkOnly 'NewApi', 'InlinedApi'
        // If set to true, turns off analysis progress reporting by lint.
        quiet true
        // if set to true (default), stops the build if errors are found.
        abortOnError false
        // if true, only report errors.
        ignoreWarnings true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.2.0'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation  Dependencies.androidCoreX
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.compose.material3:material3:1.0.0-alpha11'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
}

task foo { task ->
    doLast {
        project.android.buildTypes.every {
            println "buildType: ${it.name} \nversionCode: ${ versionCodeFromLocalProperties()} \nversionName: ${versionNameFromLocalProperties()}"
        }
    }
}
